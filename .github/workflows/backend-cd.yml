name: CD - Deploy Backend

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - src/**

jobs:
  deploy:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17.4
        env:
          POSTGRES_USER: ${{ secrets.DATASOURCE_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.DATASOURCE_PASSWORD }}
          POSTGRES_DB: codeguard
        ports:
          - 5332:5432
        options:
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client
      - name: Create schema 'codeguard' in database
        run: |
          PGPASSWORD=${{ secrets.DATASOURCE_PASSWORD }} psql \
            -h localhost -p 5332 -U ${{ secrets.DATASOURCE_USERNAME }} \
            -d codeguard \
            -c "CREATE SCHEMA IF NOT EXISTS codeguard;"
      - name: Set build number
        id: build-number
        run: echo "BUILD_NUMBER=$(date '+%d.%m.%Y.%H.%M.%S')" >> $GITHUB_OUTPUT
      - name: Build Package Push with Gradle
        run: ./gradlew clean build -PdockerImageTag=${{steps.build-number.outputs.BUILD_NUMBER}} jib
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5332/codeguard
          SPRING_DATASOURCE_USERNAME: ${{ secrets.DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.DATASOURCE_PASSWORD }}
          SPRING_LIQUIBASE_ENABLED: "false"
          SPRING_JPA_HIBERNATE_DDL_AUTO: "create-drop"
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_ACCESS_TOKEN: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          APPLICATION_OPENAI_TOKEN: ${{ secrets.APPLICATION_OPENAI_TOKEN }}
      - name: Update Dockerrun.aws.json api image tag with new build number
        run: |
          echo "Dockerrun.aws.json before updating tag"
          cat Dockerrun.aws.json
          sed -i -E 's_(lyubomir15/code-guard-api:)([^"]*)_\1'${{steps.build-number.outputs.BUILD_NUMBER}}'_' Dockerrun.aws.json
          echo "Dockerrun.aws.json after updating tag"
          cat Dockerrun.aws.json
      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ secrets.EB_APPLICATION_NAME }}
          environment_name: ${{ secrets.EB_ENVIRONMENT_NAME }}
          version_label: ${{ steps.build-number.outputs.BUILD_NUMBER }}
          version_description: ${{ github.SHA }}
          region: ${{ secrets.EB_REGION }}
          deployment_package: Dockerrun.aws.json
      - name: Commit and push Dockerrun.aws.json
        env:
          GITHUB_TOKEN: ${{ secrets.REPOSITORY_TOKEN }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add Dockerrun.aws.json
          git commit -m "Update Dockerrun.aws.json docker image with new tag ${{ steps.build-number.outputs.BUILD_NUMBER }}"
          git remote set-url origin "https://${GITHUB_TOKEN}@github.com/Lyubo15/CodeGuard.git"
          git push origin HEAD:main
