plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.google.cloud.tools.jib' version '3.4.4'
}

group = 'com.tu'
version = '0.0.1-SNAPSHOT'

ext {
	dockerUsername = 'lyubomir15'
	dockerImageName = 'code-guard-api'
	dockerImageTag = project.findProperty('dockerImageTag') ?: 'latest'
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Spring Boot
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

	// AWS
	implementation 'software.amazon.awssdk:s3:2.23.2'
	implementation 'software.amazon.awssdk:apache-client:2.23.2'

	// JWT
	implementation("io.jsonwebtoken:jjwt-api:0.11.5")
	implementation("io.jsonwebtoken:jjwt-impl:0.11.5")
	implementation("io.jsonwebtoken:jjwt-jackson:0.11.5")

	// Database
	implementation 'org.liquibase:liquibase-core'
	runtimeOnly 'org.postgresql:postgresql'

	// SLF4J API (needed for logging)
	implementation 'org.slf4j:slf4j-api'
	implementation 'ch.qos.logback:logback-classic'
	implementation 'net.logstash.logback:logstash-logback-encoder:7.4'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Development tools
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	// OpenAI
	implementation 'io.github.sashirestela:simple-openai:3.18.0'

	// OpenAPI
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.5'

	// ClamAV integration
	implementation 'fi.solita.clamav:clamav-client:1.0.1'

	// Testing
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


tasks.named('test') {
	useJUnitPlatform()
}

jib {
	from {
		image = 'eclipse-temurin:21'
		platforms {
			platform {
				architecture = 'arm64'
				os = 'linux'
			}
			platform {
				architecture = 'amd64'
				os = 'linux'
			}
		}
	}

	to {
		image = "docker.io/${dockerUsername}/${dockerImageName}:${dockerImageTag}"
		tags = ['latest']
		auth {
			username = System.getenv('DOCKERHUB_USERNAME') ?: ''
			password = System.getenv('DOCKERHUB_ACCESS_TOKEN') ?: ''
		}
	}
}


